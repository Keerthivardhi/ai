Write the python program to solve 8-Puzzle problem.





from collections import deque

# Function to find the possible moves
def find_moves(state):
    moves = []
    i, j = state.index(0) // 3, state.index(0) % 3

    if i > 0:  # Move empty cell up
        moves.append('u')
    if i < 2:  # Move empty cell down
        moves.append('d')
    if j > 0:  # Move empty cell left
        moves.append('l')
    if j < 2:  # Move empty cell right
        moves.append('r')

    return moves

# Function to apply the move
def apply_move(state, move):
    state = list(state)
    i, j = state.index(0) // 3, state.index(0) % 3

    if move == 'u':
        state[i * 3 + j], state[(i - 1) * 3 + j] = state[(i - 1) * 3 + j], state[i * 3 + j]
    elif move == 'd':
        state[i * 3 + j], state[(i + 1) * 3 + j] = state[(i + 1) * 3 + j], state[i * 3 + j]
    elif move == 'l':
        state[i * 3 + j], state[i * 3 + (j - 1)] = state[i * 3 + (j - 1)], state[i * 3 + j]
    elif move == 'r':
        state[i * 3 + j], state[i * 3 + (j + 1)] = state[i * 3 + (j + 1)], state[i * 3 + j]

    return tuple(state)

# Function to solve the puzzle
def solve_puzzle(start_state, goal_state):
    visited = set()
    queue = deque([(start_state, [])])

    while queue:
        current_state, path = queue.popleft()
        visited.add(current_state)

        if current_state == goal_state:
            return path

        for move in find_moves(current_state):
            new_state = apply_move(current_state, move)
            if new_state not in visited:
                queue.append((new_state, path + [move]))

    return None

# Main function
if __name__ == "__main__":
    start_state = (1, 2, 3, 4, 0, 5, 6, 7, 8)  # Initial state
    goal_state = (0, 1, 2, 3, 4, 5, 6, 7, 8)  # Goal state

    solution = solve_puzzle(start_state, goal_state)

    if solution:
        print("Solution found with {} steps:".format(len(solution)))
        print(solution)
    else:
        print("No solution found.")
