Write the python program to implement A* algorithm.





import heapq

class Graph:
    def __init__(self):
        self.edges = {}

    def add_edge(self, node1, node2, cost):
        if node1 not in self.edges:
            self.edges[node1] = []
        if node2 not in self.edges:
            self.edges[node2] = []
        self.edges[node1].append((node2, cost))
        self.edges[node2].append((node1, cost))

def astar(graph, start, goal):
    open_list = [(0, start)]  # Priority queue of open nodes (priority, node)
    came_from = {}  # Dictionary to store the parent node of each node
    g_score = {node: float('inf') for node in graph.edges}  # Dictionary to store the cost from start to each node
    g_score[start] = 0
    f_score = {node: float('inf') for node in graph.edges}  # Dictionary to store the total cost from start to goal through each node
    f_score[start] = heuristic(start, goal)

    while open_list:
        current_cost, current_node = heapq.heappop(open_list)

        if current_node == goal:
            path = []
            while current_node in came_from:
                path.append(current_node)
                current_node = came_from[current_node]
            path.append(start)
            return path[::-1]

        for neighbor, cost in graph.edges[current_node]:
            tentative_g_score = g_score[current_node] + cost
            if tentative_g_score < g_score[neighbor]:
                came_from[neighbor] = current_node
                g_score[neighbor] = tentative_g_score
                f_score[neighbor] = g_score[neighbor] + heuristic(neighbor, goal)
                heapq.heappush(open_list, (f_score[neighbor], neighbor))

    return None  # No path found

def heuristic(node, goal):
    # Euclidean distance heuristic
    x1, y1 = node
    x2, y2 = goal
    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5

if __name__ == "__main__":
    # Create a graph
    graph = Graph()
    graph.add_edge((0, 0), (1, 0), 1)
    graph.add_edge((1, 0), (1, 1), 1)
    graph.add_edge((1, 1), (2, 1), 1)
    graph.add_edge((2, 1), (2, 2), 1)
    graph.add_edge((2, 2), (3, 2), 1)
    graph.add_edge((3, 2), (3, 3), 1)
    graph.add_edge((3, 3), (4, 3), 1)
    graph.add_edge((4, 3), (4, 4), 1)
    graph.add_edge((4, 4), (5, 4), 1)

    # Find the shortest path using A* algorithm
    start = (0, 0)
    goal = (5, 4)
    path = astar(graph, start, goal)

    if path:
        print("Shortest path from", start, "to", goal, ":", path)
    else:
        print("No path found")
