Write the python program to implement Minimax algorithm for gaming.





import math

class TicTacToe:
    def __init__(self):
        self.board = [[' ']*3 for _ in range(3)]
        self.current_player = 'X'

    def print_board(self):
        for row in self.board:
            print("|".join(row))
            print("-" * 5)

    def make_move(self, row, col):
        if self.board[row][col] == ' ':
            self.board[row][col] = self.current_player
            self.current_player = 'O' if self.current_player == 'X' else 'X'
            return True
        return False

    def is_winner(self, player):
        for row in self.board:
            if all(cell == player for cell in row):
                return True

        for col in range(3):
            if all(self.board[row][col] == player for row in range(3)):
                return True

        if all(self.board[i][i] == player for i in range(3)) or all(self.board[i][2-i] == player for i in range(3)):
            return True

        return False

    def is_board_full(self):
        return all(cell != ' ' for row in self.board for cell in row)

    def get_possible_moves(self):
        moves = []
        for row in range(3):
            for col in range(3):
                if self.board[row][col] == ' ':
                    moves.append((row, col))
        return moves

    def minimax(self, depth, is_maximizing_player):
        if self.is_winner('X'):
            return -10 + depth
        elif self.is_winner('O'):
            return 10 - depth
        elif self.is_board_full():
            return 0

        if is_maximizing_player:
            best_score = -math.inf
            for row, col in self.get_possible_moves():
                self.board[row][col] = 'O'
                score = self.minimax(depth + 1, False)
                self.board[row][col] = ' '
                best_score = max(best_score, score)
            return best_score
        else:
            best_score = math.inf
            for row, col in self.get_possible_moves():
                self.board[row][col] = 'X'
                score = self.minimax(depth + 1, True)
                self.board[row][col] = ' '
                best_score = min(best_score, score)
            return best_score

    def find_best_move(self):
        best_score = -math.inf
        best_move = None
        for row, col in self.get_possible_moves():
            self.board[row][col] = 'O'
            score = self.minimax(0, False)
            self.board[row][col] = ' '
            if score > best_score:
                best_score = score
                best_move = (row, col)
        return best_move

def play_tic_tac_toe():
    game = TicTacToe()
    print("Welcome to Tic Tac Toe!")

    while True:
        game.print_board()
        row, col = map(int, input("Enter row and column (0-2): ").split())
        if game.make_move(row, col):
            if game.is_winner('X'):
                game.print_board()
                print("Player X wins!")
                break
            elif game.is_board_full():
                game.print_board()
                print("It's a tie!")
                break
            else:
                best_row, best_col = game.find_best_move()
                game.make_move(best_row, best_col)
                if game.is_winner('O'):
                    game.print_board()
                    print("Player O wins!")
                    break
                elif game.is_board_full():
                    game.print_board()
                    print("It's a tie!")
                    break

if __name__ == "__main__":
    play_tic_tac_toe()
